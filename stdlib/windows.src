#if X86 {
    WINAPI :: "stdcall";
}

#if X64 {
    WINAPI :: "default";
}

BOOL :: u32;

WORD :: u16;

DWORD :: u32;
LPDWORD :: *DWORD;

ATOM :: WORD;

UINT :: u32;

UINT_PTR :: *usize;

LONG :: u32;

LONGLONG :: u64;

LONG_PTR :: usize;

WPARAM :: UINT_PTR;

LPARAM :: LONG_PTR;

LRESULT :: LONG_PTR;

PVOID :: *void;
LPVOID :: *void;

HANDLE :: PVOID;

HINSTANCE :: HANDLE;

HMODULE :: HANDLE;

CHAR :: u8;

LPCSTR :: *CHAR;

ULONG_PTR :: usize;

SIZE_T :: ULONG_PTR;

SECURITY_ATTRIBUTES :: void;
PSECURITY_ATTRIBUTES :: *SECURITY_ATTRIBUTES;
LPSECURITY_ATTRIBUTES :: *SECURITY_ATTRIBUTES;

OVERLAPPED :: void;
LPOVERLAPPED :: *OVERLAPPED;

MEM_COMMIT :: 0x00001000;
MEM_RESERVE :: 0x00002000;

MEM_DECOMMIT :: 0x00004000;
MEM_RELEASE :: 0x00008000;

PAGE_NOACCESS :: 0x01;
PAGE_READONLY :: 0x02;
PAGE_READWRITE :: 0x04;
PAGE_WRITECOPY :: 0x08;
PAGE_EXECUTE :: 0x10;
PAGE_EXECUTE_READ :: 0x20;
PAGE_EXECUTE_READWRITE :: 0x40;
PAGE_EXECUTE_WRITECOPY :: 0x80;

GENERIC_READ :: 0x80000000;
GENERIC_WRITE :: 0x40000000;
GENERIC_EXECUTE :: 0x20000000;
GENERIC_ALL :: 0x10000000;

FILE_SHARE_READ :: 0x00000001;
FILE_SHARE_WRITE :: 0x00000002;
FILE_SHARE_DELETE :: 0x00000004;

CREATE_NEW :: 1;
CREATE_ALWAYS :: 2;
OPEN_EXISTING :: 3;
OPEN_ALWAYS :: 4;
TRUNCATE_EXISTING :: 5;

ExitProcess :: (uExitCode: UINT) #extern("kernel32") #call_conv(WINAPI);

OutputDebugStringA :: (lpOutputString: LPCSTR) #extern("kernel32") #call_conv(WINAPI);

GetLastError :: () -> DWORD #extern("kernel32") #call_conv(WINAPI);

VirtualAlloc :: (lpAddress: LPVOID, dwSize: SIZE_T, flAllocationType: DWORD, flProtected: DWORD) -> LPVOID #extern("kernel32") #call_conv(WINAPI);
VirtualFree :: (lpAddress: LPVOID, dwSize: SIZE_T, dwFreeType: DWORD) -> BOOL #extern("kernel32") #call_conv(WINAPI);

GetProcessHeap :: () -> HANDLE #extern("kernel32") #call_conv(WINAPI);

HeapAlloc :: (hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T) -> LPVOID #extern("kernel32") #call_conv(WINAPI);
HeapReAlloc :: (hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID, dwBytes: SIZE_T) -> LPVOID #extern("kernel32") #call_conv(WINAPI);
HeapFree :: (hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID) -> BOOL #extern("kernel32") #call_conv(WINAPI);

GetModuleHandleA :: (lpModuleName: LPCSTR) -> HMODULE #extern("kernel32") #call_conv(WINAPI);

QueryPerformanceFrequency :: (lpFrequency: *LONGLONG) -> BOOL #extern("kernel32") #call_conv(WINAPI);
QueryPerformanceCounter :: (lpPerformanceCount: *LONGLONG) -> BOOL #extern("kernel32") #call_conv(WINAPI);

CreateFileA :: (
    lpFileName: LPCSTR,
    dwDesiredAccess: DWORD,
    dwSharedMode: DWORD,
    lpSecurityAttributes: LPSECURITY_ATTRIBUTES,
    dwCreationDisposition: DWORD,
    dwFlagsAndAttributes: DWORD
) -> HANDLE #extern("kernel32") #call_conv(WINAPI);

GetFileSize :: (
    hFile: HANDLE,
    lpFileSizeHigh: LPDWORD
) -> DWORD #extern("kernel32") #call_conv(WINAPI);

ReadFile :: (
    hFile: HANDLE,
    lpBuffer: LPVOID,
    nNumberOfBytesToRead: DWORD,
    lpNumberOfBytesToRead: LPDWORD,
    lpOverlapped: LPOVERLAPPED
) -> BOOL #extern("kernel32") #call_conv(WINAPI);

CloseHandle :: (hObject: HANDLE) -> BOOL #extern("kernel32") #call_conv(WINAPI);