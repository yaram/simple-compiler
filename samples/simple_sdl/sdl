#if WINDOWS {
    #if MSVC {
        #if DEBUG {
            SDL_LIB :: "SDL2-staticd";
        }

        #if RELEASE {
            SDL_LIB :: "SDL2-static";
        }
    }

    #if GNU {
        SDL_LIB :: "SDL2";
    }

    LIBS :: { SDL_LIB as []u8, "kernel32", "user32", "gdi32", "winmm", "imm32", "ole32", "oleaut32", "version", "uuid", "advapi32", "shell32", "setupapi" };
}

#if LINUX {
    LIBS :: "SDL2";
}

SDL_INIT_TIMER :: 0x00000001;
SDL_INIT_AUDIO :: 0x00000010;
SDL_INIT_VIDEO :: 0x00000020;
SDL_INIT_JOYSTICK :: 0x00000200;
SDL_INIT_HAPTIC :: 0x00001000;
SDL_INIT_GAMECONTROLLER :: 0x00002000;
SDL_INIT_EVENTS :: 0x00004000;
SDL_INIT_EVERYTHING :: SDL_INIT_TIMER | SDL_INIT_AUDIO | SDL_INIT_VIDEO | SDL_INIT_EVENTS | SDL_INIT_JOYSTICK | SDL_INIT_HAPTIC | SDL_INIT_GAMECONTROLLER;

SDL_WINDOWPOS_UNDEFINED :: 0x1FFF0000;

SDL_Window :: void;

SDL_Event :: struct {
    type: SDL_EventType,
    timestamp: u32,
    body: SDL_EventBody
}

SDL_EventBody :: union {
    display: SDL_DisplayEvent,
    window: SDL_WindowEvent,
    key: SDL_KeyboardEvent,
    edit: SDL_TextEditingEvent,
    editExt: SDL_TextEditingExtEvent,
    text: SDL_TextInputEvent,
    motion: SDL_MouseMotionEvent,
    button: SDL_MouseButtonEvent,
    wheel: SDL_MouseWheelEvent,
    jaxis: SDL_JoyAxisEvent,
    jball: SDL_JoyBallEvent,
    jhat: SDL_JoyHatEvent,
    jbutton: SDL_JoyButtonEvent,
    jdevice: SDL_JoyDeviceEvent,
    jbattery: SDL_JoyBatteryEvent,
    caxis: SDL_ControllerAxisEvent,
    cbutton: SDL_ControllerButtonEvent,
    cdevice: SDL_ControllerDeviceEvent,
    ctouchpad: SDL_ControllerTouchpadEvent,
    csensor: SDL_ControllerSensorEvent,
    adevice: SDL_AudioDeviceEvent,
    sensor: SDL_SensorEvent,
    quit: SDL_QuitEvent,
    user: SDL_UserEvent,
    syswm: SDL_SysWMEvent,
    tfinger: SDL_TouchFingerEvent,
    mgesture: SDL_MultiGestureEvent,
    dgesture: SDL_DollarGestureEvent,
    drop: SDL_DropEvent
}

SDL_DisplayEvent :: struct {
    display: u32,
    event: u8,
    padding1: u8,
    padding2: u8,
    padding3: u8,
    data1: i32
}

SDL_WindowEvent :: struct {
    windowID: u32,
    event: SDL_WindowEventID,
    padding1: u8,
    padding2: u8,
    padding3: u8,
    data1: i32,
    data2: i32
}

SDL_Keysym :: struct {
    scancode: SDL_Scancode,
    sym: SDL_Keycode,
    mod: u16,
    unused: u32
}

SDL_KeyboardEvent :: struct {
    windowID: u32,
    state: u8,
    repeat: u8,
    padding2: u8,
    padding3: u8,
    keysym: SDL_Keysym
}

SDL_TextEditingEvent :: struct {
    windowID: u32,
    text: [32]u8,
    start: i32,
    length: i32
}

SDL_TextEditingExtEvent :: struct {
    windowID: u32,
    text: *u8,
    start: i32,
    length: i32
}

SDL_TextInputEvent :: struct {
    windowID: u32,
    text: [32]u8
}

SDL_MouseMotionEvent :: struct {
    windowID: u32,
    which: u32,
    state: u32,
    x: i32,
    y: i32,
    xrel: i32,
    yrel: i32
}

SDL_MouseButtonEvent :: struct {
    windowID: u32,
    which: u32,
    button: u8,
    state: u8,
    clicks: u8,
    padding1: u8,
    x: i32,
    y: i32
}

SDL_MouseWheelEvent :: struct {
    windowID: u32,
    which: u32,
    x: i32,
    y: i32,
    direction: u32,
    preciseX: float,
    preciseY: float,
    mouseX: i32,
    mouseY: i32
}

SDL_JoystickID :: i32;

SDL_JoyAxisEvent :: struct {
    which: SDL_JoystickID,
    axis: u8,
    padding1: u8,
    padding2: u8,
    padding3: u8,
    value: i16,
    padding4: u16
}

SDL_JoyBallEvent :: struct {
    which: SDL_JoystickID,
    ball: u8,
    padding1: u8,
    padding2: u8,
    padding3: u8,
    xrel: i16,
    yrel: i16
}

SDL_JoyHatEvent :: struct {
    which: SDL_JoystickID,
    hat: u8,
    value: u8,
    padding1: u8,
    padding2: u8
}

SDL_JoyButtonEvent :: struct {
    which: SDL_JoystickID,
    button: u8,
    state: u8,
    padding1: u8,
    padding2: u8
}

SDL_JoyDeviceEvent :: struct {
    which: i32
}

SDL_JoystickPowerLevel :: i32;

SDL_JoyBatteryEvent :: struct {
    which: SDL_JoystickID,
    level: SDL_JoystickPowerLevel
}

SDL_ControllerAxisEvent :: struct {
    which: SDL_JoystickID,
    axis: u8,
    padding1: u8,
    padding2: u8,
    padding3: u8,
    value: i16,
    padding4: u16
}

SDL_ControllerButtonEvent :: struct {
    which: SDL_JoystickID,
    button: u8,
    state: u8,
    padding1: u8,
    padding2: u8
}

SDL_ControllerDeviceEvent :: struct {
    which: i32
}

SDL_ControllerTouchpadEvent :: struct {
    which: SDL_JoystickID,
    touchpad: i32,
    finger: i32,
    x: float,
    y: float,
    pressure: float
}

SDL_ControllerSensorEvent :: struct {
    which: SDL_JoystickID,
    sensor: i32,
    data: [3]float,
    timestamp_us: u64
}

SDL_AudioDeviceEvent :: struct {
    which: u32,
    iscapture: u8,
    padding1: u8,
    padding2: u8,
    padding3: u8
}

SDL_TouchID :: i64;
SDL_FingerID :: i64;

SDL_TouchFingerEvent :: struct {
    touchId: SDL_TouchID,
    fingerId: SDL_FingerID,
    x: float,
    y: float,
    dx: float,
    dy: float,
    pressure: float,
    windowID: u32
}

SDL_MultiGestureEvent :: struct {
    touchId: SDL_TouchID,
    dTheta: float,
    dDist: float,
    x: float,
    y: float,
    numFingers: u16,
    padding: u16
}

SDL_GestureID :: i64;

SDL_DollarGestureEvent :: struct {
    touchId: SDL_TouchID,
    gestureId: SDL_GestureID,
    numFingers: u32,
    error: float,
    x: float,
    y: float
}

SDL_DropEvent :: struct {
    file: *u8,
    windowID: u32
}

SDL_SensorEvent :: struct {
    which: i32,
    data: [6]float,
    timestamp_us: u64
}

SDL_QuitEvent :: struct {}

SDL_UserEvent :: struct {
    windowID: u32,
    code: i32,
    data1: *void,
    data2: *void
}

SDL_SysWMEvent :: struct {
    msg: *void
}

SDL_WindowEvent :: struct {
    timestamp: u32,
    windowID: u32,
    event: u8,
    padding: [3]u8,
    data1: i32,
    data2: i32
}

SDL_EventType :: enum u32 {
    SDL_FIRSTEVENT,
    SDL_QUIT = 0x100,
    SDL_APP_TERMINATING,
    SDL_APP_LOWMEMORY,
    SDL_APP_WILLENTERBACKGROUND,
    SDL_APP_DIDENTERBACKGROUND,
    SDL_APP_WILLENTERFOREGROUND,
    SDL_APP_DIDENTERFOREGROUND,
    SDL_LOCALECHANGED,
    SDL_DISPLAYEVENT = 0x150,
    SDL_WINDOWEVENT = 0x200,
    SDL_SYSWMEVENT,
    SDL_KEYDOWN = 0x300,
    SDL_KEYUP,
    SDL_TEXTEDITING,
    SDL_TEXTINPUT,
    SDL_KEYMAPCHANGED,
    SDL_TEXTEDITING_EXT,
    SDL_MOUSEMOTION = 0x400,
    SDL_MOUSEBUTTONDOWN,
    SDL_MOUSEBUTTONUP,
    SDL_MOUSEWHEEL,
    SDL_JOYAXISMOTION = 0x600,
    SDL_JOYBALLMOTION,
    SDL_JOYHATMOTION,
    SDL_JOYBUTTONDOWN,
    SDL_JOYBUTTONUP,
    SDL_JOYDEVICEADDED,
    SDL_JOYDEVICEREMOVED,
    SDL_JOYBATTERYUPDATED,
    SDL_CONTROLLERAXISMOTION = 0x650,
    SDL_CONTROLLERBUTTONDOWN,
    SDL_CONTROLLERBUTTONUP,
    SDL_CONTROLLERDEVICEADDED,
    SDL_CONTROLLERDEVICEREMOVED,
    SDL_CONTROLLERDEVICEREMAPPED,
    SDL_CONTROLLERTOUCHPADDOWN,
    SDL_CONTROLLERTOUCHPADMOTION,
    SDL_CONTROLLERTOUCHPADUP,
    SDL_CONTROLLERSENSORUPDATE,
    SDL_CONTROLLERUPDATECOMPLETE_RESERVED_FOR_SDL3,
    SDL_CONTROLLERSTEAMHANDLEUPDATED,
    SDL_FINGERDOWN = 0x700,
    SDL_FINGERUP,
    SDL_FINGERMOTION,
    SDL_DOLLARGESTURE = 0x800,
    SDL_DOLLARRECORD,
    SDL_MULTIGESTURE,
    SDL_CLIPBOARDUPDATE = 0x900,
    SDL_DROPFILE = 0x1000,
    SDL_DROPTEXT,
    SDL_DROPBEGIN,
    SDL_DROPCOMPLETE,
    SDL_AUDIODEVICEADDED = 0x1100,
    SDL_AUDIODEVICEREMOVED,
    SDL_SENSORUPDATE = 0x1200,
    SDL_RENDER_TARGETS_RESET = 0x2000,
    SDL_RENDER_DEVICE_RESET,
    SDL_POLLSENTINEL = 0x7F00,
    SDL_USEREVENT = 0x8000,
    SDL_LASTEVENT = 0xFFFF
}

SDL_WindowEventID :: enum u8 {
    SDL_WINDOWEVENT_NONE,
    SDL_WINDOWEVENT_SHOWN,
    SDL_WINDOWEVENT_HIDDEN,
    SDL_WINDOWEVENT_EXPOSED,
    SDL_WINDOWEVENT_MOVED,
    SDL_WINDOWEVENT_RESIZED,
    SDL_WINDOWEVENT_SIZE_CHANGED,
    SDL_WINDOWEVENT_MINIMIZED,
    SDL_WINDOWEVENT_MAXIMIZED,
    SDL_WINDOWEVENT_RESTORED,
    SDL_WINDOWEVENT_ENTER,
    SDL_WINDOWEVENT_LEAVE,
    SDL_WINDOWEVENT_FOCUS_GAINED,
    SDL_WINDOWEVENT_FOCUS_LOST,
    SDL_WINDOWEVENT_CLOSE,
    SDL_WINDOWEVENT_TAKE_FOCUS,
    SDL_WINDOWEVENT_HIT_TEST,
    SDL_WINDOWEVENT_ICCPROF_CHANGED,
    SDL_WINDOWEVENT_DISPLAY_CHANGED
}

SDL_Scancode :: enum i32 {
    SDL_SCANCODE_UNKNOWN = 0,
    SDL_SCANCODE_A = 4,
    SDL_SCANCODE_B = 5,
    SDL_SCANCODE_C = 6,
    SDL_SCANCODE_D = 7,
    SDL_SCANCODE_E = 8,
    SDL_SCANCODE_F = 9,
    SDL_SCANCODE_G = 10,
    SDL_SCANCODE_H = 11,
    SDL_SCANCODE_I = 12,
    SDL_SCANCODE_J = 13,
    SDL_SCANCODE_K = 14,
    SDL_SCANCODE_L = 15,
    SDL_SCANCODE_M = 16,
    SDL_SCANCODE_N = 17,
    SDL_SCANCODE_O = 18,
    SDL_SCANCODE_P = 19,
    SDL_SCANCODE_Q = 20,
    SDL_SCANCODE_R = 21,
    SDL_SCANCODE_S = 22,
    SDL_SCANCODE_T = 23,
    SDL_SCANCODE_U = 24,
    SDL_SCANCODE_V = 25,
    SDL_SCANCODE_W = 26,
    SDL_SCANCODE_X = 27,
    SDL_SCANCODE_Y = 28,
    SDL_SCANCODE_Z = 29,
    SDL_SCANCODE_1 = 30,
    SDL_SCANCODE_2 = 31,
    SDL_SCANCODE_3 = 32,
    SDL_SCANCODE_4 = 33,
    SDL_SCANCODE_5 = 34,
    SDL_SCANCODE_6 = 35,
    SDL_SCANCODE_7 = 36,
    SDL_SCANCODE_8 = 37,
    SDL_SCANCODE_9 = 38,
    SDL_SCANCODE_0 = 39,
    SDL_SCANCODE_RETURN = 40,
    SDL_SCANCODE_ESCAPE = 41,
    SDL_SCANCODE_BACKSPACE = 42,
    SDL_SCANCODE_TAB = 43,
    SDL_SCANCODE_SPACE = 44,
    SDL_SCANCODE_MINUS = 45,
    SDL_SCANCODE_EQUALS = 46,
    SDL_SCANCODE_LEFTBRACKET = 47,
    SDL_SCANCODE_RIGHTBRACKET = 48,
    SDL_SCANCODE_BACKSLASH = 49,
    SDL_SCANCODE_NONUSHASH = 50,
    SDL_SCANCODE_SEMICOLON = 51,
    SDL_SCANCODE_APOSTROPHE = 52,
    SDL_SCANCODE_GRAVE = 53,
    SDL_SCANCODE_COMMA = 54,
    SDL_SCANCODE_PERIOD = 55,
    SDL_SCANCODE_SLASH = 56,
    SDL_SCANCODE_CAPSLOCK = 57,
    SDL_SCANCODE_F1 = 58,
    SDL_SCANCODE_F2 = 59,
    SDL_SCANCODE_F3 = 60,
    SDL_SCANCODE_F4 = 61,
    SDL_SCANCODE_F5 = 62,
    SDL_SCANCODE_F6 = 63,
    SDL_SCANCODE_F7 = 64,
    SDL_SCANCODE_F8 = 65,
    SDL_SCANCODE_F9 = 66,
    SDL_SCANCODE_F10 = 67,
    SDL_SCANCODE_F11 = 68,
    SDL_SCANCODE_F12 = 69,
    SDL_SCANCODE_PRINTSCREEN = 70,
    SDL_SCANCODE_SCROLLLOCK = 71,
    SDL_SCANCODE_PAUSE = 72,
    SDL_SCANCODE_INSERT = 73,
    SDL_SCANCODE_HOME = 74,
    SDL_SCANCODE_PAGEUP = 75,
    SDL_SCANCODE_DELETE = 76,
    SDL_SCANCODE_END = 77,
    SDL_SCANCODE_PAGEDOWN = 78,
    SDL_SCANCODE_RIGHT = 79,
    SDL_SCANCODE_LEFT = 80,
    SDL_SCANCODE_DOWN = 81,
    SDL_SCANCODE_UP = 82,
    SDL_SCANCODE_NUMLOCKCLEAR = 83,
    SDL_SCANCODE_KP_DIVIDE = 84,
    SDL_SCANCODE_KP_MULTIPLY = 85,
    SDL_SCANCODE_KP_MINUS = 86,
    SDL_SCANCODE_KP_PLUS = 87,
    SDL_SCANCODE_KP_ENTER = 88,
    SDL_SCANCODE_KP_1 = 89,
    SDL_SCANCODE_KP_2 = 90,
    SDL_SCANCODE_KP_3 = 91,
    SDL_SCANCODE_KP_4 = 92,
    SDL_SCANCODE_KP_5 = 93,
    SDL_SCANCODE_KP_6 = 94,
    SDL_SCANCODE_KP_7 = 95,
    SDL_SCANCODE_KP_8 = 96,
    SDL_SCANCODE_KP_9 = 97,
    SDL_SCANCODE_KP_0 = 98,
    SDL_SCANCODE_KP_PERIOD = 99,
    SDL_SCANCODE_NONUSBACKSLASH = 100,
    SDL_SCANCODE_APPLICATION = 101,
    SDL_SCANCODE_POWER = 102,
    SDL_SCANCODE_KP_EQUALS = 103,
    SDL_SCANCODE_F13 = 104,
    SDL_SCANCODE_F14 = 105,
    SDL_SCANCODE_F15 = 106,
    SDL_SCANCODE_F16 = 107,
    SDL_SCANCODE_F17 = 108,
    SDL_SCANCODE_F18 = 109,
    SDL_SCANCODE_F19 = 110,
    SDL_SCANCODE_F20 = 111,
    SDL_SCANCODE_F21 = 112,
    SDL_SCANCODE_F22 = 113,
    SDL_SCANCODE_F23 = 114,
    SDL_SCANCODE_F24 = 115,
    SDL_SCANCODE_EXECUTE = 116,
    SDL_SCANCODE_HELP = 117,
    SDL_SCANCODE_MENU = 118,
    SDL_SCANCODE_SELECT = 119,
    SDL_SCANCODE_STOP = 120,
    SDL_SCANCODE_AGAIN = 121,
    SDL_SCANCODE_UNDO = 122,
    SDL_SCANCODE_CUT = 123,
    SDL_SCANCODE_COPY = 124,
    SDL_SCANCODE_PASTE = 125,
    SDL_SCANCODE_FIND = 126,
    SDL_SCANCODE_MUTE = 127,
    SDL_SCANCODE_VOLUMEUP = 128,
    SDL_SCANCODE_VOLUMEDOWN = 129,
    SDL_SCANCODE_KP_COMMA = 133,
    SDL_SCANCODE_KP_EQUALSAS400 = 134,
    SDL_SCANCODE_INTERNATIONAL1 = 135,
    SDL_SCANCODE_INTERNATIONAL2 = 136,
    SDL_SCANCODE_INTERNATIONAL3 = 137,
    SDL_SCANCODE_INTERNATIONAL4 = 138,
    SDL_SCANCODE_INTERNATIONAL5 = 139,
    SDL_SCANCODE_INTERNATIONAL6 = 140,
    SDL_SCANCODE_INTERNATIONAL7 = 141,
    SDL_SCANCODE_INTERNATIONAL8 = 142,
    SDL_SCANCODE_INTERNATIONAL9 = 143,
    SDL_SCANCODE_LANG1 = 144,
    SDL_SCANCODE_LANG2 = 145,
    SDL_SCANCODE_LANG3 = 146,
    SDL_SCANCODE_LANG4 = 147,
    SDL_SCANCODE_LANG5 = 148,
    SDL_SCANCODE_LANG6 = 149,
    SDL_SCANCODE_LANG7 = 150,
    SDL_SCANCODE_LANG8 = 151,
    SDL_SCANCODE_LANG9 = 152,
    SDL_SCANCODE_ALTERASE = 153,
    SDL_SCANCODE_SYSREQ = 154,
    SDL_SCANCODE_CANCEL = 155,
    SDL_SCANCODE_CLEAR = 156,
    SDL_SCANCODE_PRIOR = 157,
    SDL_SCANCODE_RETURN2 = 158,
    SDL_SCANCODE_SEPARATOR = 159,
    SDL_SCANCODE_OUT = 160,
    SDL_SCANCODE_OPER = 161,
    SDL_SCANCODE_CLEARAGAIN = 162,
    SDL_SCANCODE_CRSEL = 163,
    SDL_SCANCODE_EXSEL = 164,
    SDL_SCANCODE_KP_00 = 176,
    SDL_SCANCODE_KP_000 = 177,
    SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
    SDL_SCANCODE_DECIMALSEPARATOR = 179,
    SDL_SCANCODE_CURRENCYUNIT = 180,
    SDL_SCANCODE_CURRENCYSUBUNIT = 181,
    SDL_SCANCODE_KP_LEFTPAREN = 182,
    SDL_SCANCODE_KP_RIGHTPAREN = 183,
    SDL_SCANCODE_KP_LEFTBRACE = 184,
    SDL_SCANCODE_KP_RIGHTBRACE = 185,
    SDL_SCANCODE_KP_TAB = 186,
    SDL_SCANCODE_KP_BACKSPACE = 187,
    SDL_SCANCODE_KP_A = 188,
    SDL_SCANCODE_KP_B = 189,
    SDL_SCANCODE_KP_C = 190,
    SDL_SCANCODE_KP_D = 191,
    SDL_SCANCODE_KP_E = 192,
    SDL_SCANCODE_KP_F = 193,
    SDL_SCANCODE_KP_XOR = 194,
    SDL_SCANCODE_KP_POWER = 195,
    SDL_SCANCODE_KP_PERCENT = 196,
    SDL_SCANCODE_KP_LESS = 197,
    SDL_SCANCODE_KP_GREATER = 198,
    SDL_SCANCODE_KP_AMPERSAND = 199,
    SDL_SCANCODE_KP_DBLAMPERSAND = 200,
    SDL_SCANCODE_KP_VERTICALBAR = 201,
    SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
    SDL_SCANCODE_KP_COLON = 203,
    SDL_SCANCODE_KP_HASH = 204,
    SDL_SCANCODE_KP_SPACE = 205,
    SDL_SCANCODE_KP_AT = 206,
    SDL_SCANCODE_KP_EXCLAM = 207,
    SDL_SCANCODE_KP_MEMSTORE = 208,
    SDL_SCANCODE_KP_MEMRECALL = 209,
    SDL_SCANCODE_KP_MEMCLEAR = 210,
    SDL_SCANCODE_KP_MEMADD = 211,
    SDL_SCANCODE_KP_MEMSUBTRACT = 212,
    SDL_SCANCODE_KP_MEMMULTIPLY = 213,
    SDL_SCANCODE_KP_MEMDIVIDE = 214,
    SDL_SCANCODE_KP_PLUSMINUS = 215,
    SDL_SCANCODE_KP_CLEAR = 216,
    SDL_SCANCODE_KP_CLEARENTRY = 217,
    SDL_SCANCODE_KP_BINARY = 218,
    SDL_SCANCODE_KP_OCTAL = 219,
    SDL_SCANCODE_KP_DECIMAL = 220,
    SDL_SCANCODE_KP_HEXADECIMAL = 221,
    SDL_SCANCODE_LCTRL = 224,
    SDL_SCANCODE_LSHIFT = 225,
    SDL_SCANCODE_LALT = 226,
    SDL_SCANCODE_LGUI = 227,
    SDL_SCANCODE_RCTRL = 228,
    SDL_SCANCODE_RSHIFT = 229,
    SDL_SCANCODE_RALT = 230,
    SDL_SCANCODE_RGUI = 231,
    SDL_SCANCODE_MODE = 257,
    SDL_SCANCODE_AUDIONEXT = 258,
    SDL_SCANCODE_AUDIOPREV = 259,
    SDL_SCANCODE_AUDIOSTOP = 260,
    SDL_SCANCODE_AUDIOPLAY = 261,
    SDL_SCANCODE_AUDIOMUTE = 262,
    SDL_SCANCODE_MEDIASELECT = 263,
    SDL_SCANCODE_WWW = 264,
    SDL_SCANCODE_MAIL = 265,
    SDL_SCANCODE_CALCULATOR = 266,
    SDL_SCANCODE_COMPUTER = 267,
    SDL_SCANCODE_AC_SEARCH = 268,
    SDL_SCANCODE_AC_HOME = 269,
    SDL_SCANCODE_AC_BACK = 270,
    SDL_SCANCODE_AC_FORWARD = 271,
    SDL_SCANCODE_AC_STOP = 272,
    SDL_SCANCODE_AC_REFRESH = 273,
    SDL_SCANCODE_AC_BOOKMARKS = 274,
    SDL_SCANCODE_BRIGHTNESSDOWN = 275,
    SDL_SCANCODE_BRIGHTNESSUP = 276,
    SDL_SCANCODE_DISPLAYSWITCH = 277,
    SDL_SCANCODE_KBDILLUMTOGGLE = 278,
    SDL_SCANCODE_KBDILLUMDOWN = 279,
    SDL_SCANCODE_KBDILLUMUP = 280,
    SDL_SCANCODE_EJECT = 281,
    SDL_SCANCODE_SLEEP = 282,
    SDL_SCANCODE_APP1 = 283,
    SDL_SCANCODE_APP2 = 284,
    SDL_SCANCODE_AUDIOREWIND = 285,
    SDL_SCANCODE_AUDIOFASTFORWARD = 286,
    SDL_SCANCODE_SOFTLEFT = 287,
    SDL_SCANCODE_SOFTRIGHT = 288,
    SDL_SCANCODE_CALL = 289,
    SDL_SCANCODE_ENDCALL = 290,
    SDL_NUM_SCANCODES = 512
}

SDL_Keycode :: enum i32 {
    SDLK_UNKNOWN = 0,
    SDLK_RETURN = 13,
    SDLK_ESCAPE = 27,
    SDLK_BACKSPACE = 8,
    SDLK_TAB = 9,
    SDLK_SPACE = 32,
    SDLK_EXCLAIM = 33,
    SDLK_QUOTEDBL = 34,
    SDLK_HASH = 35,
    SDLK_PERCENT = 37,
    SDLK_DOLLAR = 36,
    SDLK_AMPERSAND = 38,
    SDLK_QUOTE = 39,
    SDLK_LEFTPAREN = 40,
    SDLK_RIGHTPAREN = 41,
    SDLK_ASTERISK = 42,
    SDLK_PLUS = 43,
    SDLK_COMMA = 44,
    SDLK_MINUS = 45,
    SDLK_PERIOD = 46,
    SDLK_SLASH = 47,
    SDLK_0 = 48,
    SDLK_1 = 49,
    SDLK_2 = 50,
    SDLK_3 = 51,
    SDLK_4 = 52,
    SDLK_5 = 53,
    SDLK_6 = 54,
    SDLK_7 = 55,
    SDLK_8 = 56,
    SDLK_9 = 57,
    SDLK_COLON = 58,
    SDLK_SEMICOLON = 59,
    SDLK_LESS = 60,
    SDLK_EQUALS = 61,
    SDLK_GREATER = 62,
    SDLK_QUESTION = 63,
    SDLK_AT = 64,
    SDLK_LEFTBRACKET = 91,
    SDLK_BACKSLASH = 92,
    SDLK_RIGHTBRACKET = 93,
    SDLK_CARET = 94,
    SDLK_UNDERSCORE = 95,
    SDLK_BACKQUOTE = 96,
    SDLK_a = 97,
    SDLK_b = 98,
    SDLK_c = 99,
    SDLK_d = 100,
    SDLK_e = 101,
    SDLK_f = 102,
    SDLK_g = 103,
    SDLK_h = 104,
    SDLK_i = 105,
    SDLK_j = 106,
    SDLK_k = 107,
    SDLK_l = 108,
    SDLK_m = 109,
    SDLK_n = 110,
    SDLK_o = 111,
    SDLK_p = 112,
    SDLK_q = 113,
    SDLK_r = 114,
    SDLK_s = 115,
    SDLK_t = 116,
    SDLK_u = 117,
    SDLK_v = 118,
    SDLK_w = 119,
    SDLK_x = 120,
    SDLK_y = 121,
    SDLK_z = 122,
    SDLK_CAPSLOCK = SDL_Scancode.SDL_SCANCODE_CAPSLOCK as i32 | (1 << 30),
    SDLK_F1 = SDL_Scancode.SDL_SCANCODE_F1 as i32 | (1 << 30),
    SDLK_F2 = SDL_Scancode.SDL_SCANCODE_F2 as i32 | (1 << 30),
    SDLK_F3 = SDL_Scancode.SDL_SCANCODE_F3 as i32 | (1 << 30),
    SDLK_F4 = SDL_Scancode.SDL_SCANCODE_F4 as i32 | (1 << 30),
    SDLK_F5 = SDL_Scancode.SDL_SCANCODE_F5 as i32 | (1 << 30),
    SDLK_F6 = SDL_Scancode.SDL_SCANCODE_F6 as i32 | (1 << 30),
    SDLK_F7 = SDL_Scancode.SDL_SCANCODE_F7 as i32 | (1 << 30),
    SDLK_F8 = SDL_Scancode.SDL_SCANCODE_F8 as i32 | (1 << 30),
    SDLK_F9 = SDL_Scancode.SDL_SCANCODE_F9 as i32 | (1 << 30),
    SDLK_F10 = SDL_Scancode.SDL_SCANCODE_F10 as i32 | (1 << 30),
    SDLK_F11 = SDL_Scancode.SDL_SCANCODE_F11 as i32 | (1 << 30),
    SDLK_F12 = SDL_Scancode.SDL_SCANCODE_F12 as i32 | (1 << 30),
    SDLK_PRINTSCREEN = SDL_Scancode.SDL_SCANCODE_PRINTSCREEN as i32 | (1 << 30),
    SDLK_SCROLLLOCK = SDL_Scancode.SDL_SCANCODE_SCROLLLOCK as i32 | (1 << 30),
    SDLK_PAUSE = SDL_Scancode.SDL_SCANCODE_PAUSE as i32 | (1 << 30),
    SDLK_INSERT = SDL_Scancode.SDL_SCANCODE_INSERT as i32 | (1 << 30),
    SDLK_HOME = SDL_Scancode.SDL_SCANCODE_HOME as i32 | (1 << 30),
    SDLK_PAGEUP = SDL_Scancode.SDL_SCANCODE_PAGEUP as i32 | (1 << 30),
    SDLK_DELETE = 0x7F,
    SDLK_END = SDL_Scancode.SDL_SCANCODE_END as i32 | (1 << 30),
    SDLK_PAGEDOWN = SDL_Scancode.SDL_SCANCODE_PAGEDOWN as i32 | (1 << 30),
    SDLK_RIGHT = SDL_Scancode.SDL_SCANCODE_RIGHT as i32 | (1 << 30),
    SDLK_LEFT = SDL_Scancode.SDL_SCANCODE_LEFT as i32 | (1 << 30),
    SDLK_DOWN = SDL_Scancode.SDL_SCANCODE_DOWN as i32 | (1 << 30),
    SDLK_UP = SDL_Scancode.SDL_SCANCODE_UP as i32 | (1 << 30),
    SDLK_NUMLOCKCLEAR = SDL_Scancode.SDL_SCANCODE_NUMLOCKCLEAR as i32 | (1 << 30),
    SDLK_KP_DIVIDE = SDL_Scancode.SDL_SCANCODE_KP_DIVIDE as i32 | (1 << 30),
    SDLK_KP_MULTIPLY = SDL_Scancode.SDL_SCANCODE_KP_MULTIPLY as i32 | (1 << 30),
    SDLK_KP_MINUS = SDL_Scancode.SDL_SCANCODE_KP_MINUS as i32 | (1 << 30),
    SDLK_KP_PLUS = SDL_Scancode.SDL_SCANCODE_KP_PLUS as i32 | (1 << 30),
    SDLK_KP_ENTER = SDL_Scancode.SDL_SCANCODE_KP_ENTER as i32 | (1 << 30),
    SDLK_KP_1 = SDL_Scancode.SDL_SCANCODE_KP_1 as i32 | (1 << 30),
    SDLK_KP_2 = SDL_Scancode.SDL_SCANCODE_KP_2 as i32 | (1 << 30),
    SDLK_KP_3 = SDL_Scancode.SDL_SCANCODE_KP_3 as i32 | (1 << 30),
    SDLK_KP_4 = SDL_Scancode.SDL_SCANCODE_KP_4 as i32 | (1 << 30),
    SDLK_KP_5 = SDL_Scancode.SDL_SCANCODE_KP_5 as i32 | (1 << 30),
    SDLK_KP_6 = SDL_Scancode.SDL_SCANCODE_KP_6 as i32 | (1 << 30),
    SDLK_KP_7 = SDL_Scancode.SDL_SCANCODE_KP_7 as i32 | (1 << 30),
    SDLK_KP_8 = SDL_Scancode.SDL_SCANCODE_KP_8 as i32 | (1 << 30),
    SDLK_KP_9 = SDL_Scancode.SDL_SCANCODE_KP_9 as i32 | (1 << 30),
    SDLK_KP_0 = SDL_Scancode.SDL_SCANCODE_KP_0 as i32 | (1 << 30),
    SDLK_KP_PERIOD = SDL_Scancode.SDL_SCANCODE_KP_PERIOD as i32 | (1 << 30),
    SDLK_APPLICATION = SDL_Scancode.SDL_SCANCODE_APPLICATION as i32 | (1 << 30),
    SDLK_POWER = SDL_Scancode.SDL_SCANCODE_POWER as i32 | (1 << 30),
    SDLK_KP_EQUALS = SDL_Scancode.SDL_SCANCODE_KP_EQUALS as i32 | (1 << 30),
    SDLK_F13 = SDL_Scancode.SDL_SCANCODE_F13 as i32 | (1 << 30),
    SDLK_F14 = SDL_Scancode.SDL_SCANCODE_F14 as i32 | (1 << 30),
    SDLK_F15 = SDL_Scancode.SDL_SCANCODE_F15 as i32 | (1 << 30),
    SDLK_F16 = SDL_Scancode.SDL_SCANCODE_F16 as i32 | (1 << 30),
    SDLK_F17 = SDL_Scancode.SDL_SCANCODE_F17 as i32 | (1 << 30),
    SDLK_F18 = SDL_Scancode.SDL_SCANCODE_F18 as i32 | (1 << 30),
    SDLK_F19 = SDL_Scancode.SDL_SCANCODE_F19 as i32 | (1 << 30),
    SDLK_F20 = SDL_Scancode.SDL_SCANCODE_F20 as i32 | (1 << 30),
    SDLK_F21 = SDL_Scancode.SDL_SCANCODE_F21 as i32 | (1 << 30),
    SDLK_F22 = SDL_Scancode.SDL_SCANCODE_F22 as i32 | (1 << 30),
    SDLK_F23 = SDL_Scancode.SDL_SCANCODE_F23 as i32 | (1 << 30),
    SDLK_F24 = SDL_Scancode.SDL_SCANCODE_F24 as i32 | (1 << 30),
    SDLK_EXECUTE = SDL_Scancode.SDL_SCANCODE_EXECUTE as i32 | (1 << 30),
    SDLK_HELP = SDL_Scancode.SDL_SCANCODE_HELP as i32 | (1 << 30),
    SDLK_MENU = SDL_Scancode.SDL_SCANCODE_MENU as i32 | (1 << 30),
    SDLK_SELECT = SDL_Scancode.SDL_SCANCODE_SELECT as i32 | (1 << 30),
    SDLK_STOP = SDL_Scancode.SDL_SCANCODE_STOP as i32 | (1 << 30),
    SDLK_AGAIN = SDL_Scancode.SDL_SCANCODE_AGAIN as i32 | (1 << 30),
    SDLK_UNDO = SDL_Scancode.SDL_SCANCODE_UNDO as i32 | (1 << 30),
    SDLK_CUT = SDL_Scancode.SDL_SCANCODE_CUT as i32 | (1 << 30),
    SDLK_COPY = SDL_Scancode.SDL_SCANCODE_COPY as i32 | (1 << 30),
    SDLK_PASTE = SDL_Scancode.SDL_SCANCODE_PASTE as i32 | (1 << 30),
    SDLK_FIND = SDL_Scancode.SDL_SCANCODE_FIND as i32 | (1 << 30),
    SDLK_MUTE = SDL_Scancode.SDL_SCANCODE_MUTE as i32 | (1 << 30),
    SDLK_VOLUMEUP = SDL_Scancode.SDL_SCANCODE_VOLUMEUP as i32 | (1 << 30),
    SDLK_VOLUMEDOWN = SDL_Scancode.SDL_SCANCODE_VOLUMEDOWN as i32 | (1 << 30),
    SDLK_KP_COMMA = SDL_Scancode.SDL_SCANCODE_KP_COMMA as i32 | (1 << 30),
    SDLK_KP_EQUALSAS400 = SDL_Scancode.SDL_SCANCODE_KP_EQUALSAS400 as i32 | (1 << 30),
    SDLK_ALTERASE = SDL_Scancode.SDL_SCANCODE_ALTERASE as i32 | (1 << 30),
    SDLK_SYSREQ = SDL_Scancode.SDL_SCANCODE_SYSREQ as i32 | (1 << 30),
    SDLK_CANCEL = SDL_Scancode.SDL_SCANCODE_CANCEL as i32 | (1 << 30),
    SDLK_CLEAR = SDL_Scancode.SDL_SCANCODE_CLEAR as i32 | (1 << 30),
    SDLK_PRIOR = SDL_Scancode.SDL_SCANCODE_PRIOR as i32 | (1 << 30),
    SDLK_RETURN2 = SDL_Scancode.SDL_SCANCODE_RETURN2 as i32 | (1 << 30),
    SDLK_SEPARATOR = SDL_Scancode.SDL_SCANCODE_SEPARATOR as i32 | (1 << 30),
    SDLK_OUT = SDL_Scancode.SDL_SCANCODE_OUT as i32 | (1 << 30),
    SDLK_OPER = SDL_Scancode.SDL_SCANCODE_OPER as i32 | (1 << 30),
    SDLK_CLEARAGAIN = SDL_Scancode.SDL_SCANCODE_CLEARAGAIN as i32 | (1 << 30),
    SDLK_CRSEL = SDL_Scancode.SDL_SCANCODE_CRSEL as i32 | (1 << 30),
    SDLK_EXSEL = SDL_Scancode.SDL_SCANCODE_EXSEL as i32 | (1 << 30),
    SDLK_KP_00 = SDL_Scancode.SDL_SCANCODE_KP_00 as i32 | (1 << 30),
    SDLK_KP_000 = SDL_Scancode.SDL_SCANCODE_KP_000 as i32 | (1 << 30),
    SDLK_THOUSANDSSEPARATOR = SDL_Scancode.SDL_SCANCODE_THOUSANDSSEPARATOR as i32 | (1 << 30),
    SDLK_DECIMALSEPARATOR = SDL_Scancode.SDL_SCANCODE_DECIMALSEPARATOR as i32 | (1 << 30),
    SDLK_CURRENCYUNIT = SDL_Scancode.SDL_SCANCODE_CURRENCYUNIT as i32 | (1 << 30),
    SDLK_CURRENCYSUBUNIT = SDL_Scancode.SDL_SCANCODE_CURRENCYSUBUNIT as i32 | (1 << 30),
    SDLK_KP_LEFTPAREN = SDL_Scancode.SDL_SCANCODE_KP_LEFTPAREN as i32 | (1 << 30),
    SDLK_KP_RIGHTPAREN = SDL_Scancode.SDL_SCANCODE_KP_RIGHTPAREN as i32 | (1 << 30),
    SDLK_KP_LEFTBRACE = SDL_Scancode.SDL_SCANCODE_KP_LEFTBRACE as i32 | (1 << 30),
    SDLK_KP_RIGHTBRACE = SDL_Scancode.SDL_SCANCODE_KP_RIGHTBRACE as i32 | (1 << 30),
    SDLK_KP_TAB = SDL_Scancode.SDL_SCANCODE_KP_TAB as i32 | (1 << 30),
    SDLK_KP_BACKSPACE = SDL_Scancode.SDL_SCANCODE_KP_BACKSPACE as i32 | (1 << 30),
    SDLK_KP_A = SDL_Scancode.SDL_SCANCODE_KP_A as i32 | (1 << 30),
    SDLK_KP_B = SDL_Scancode.SDL_SCANCODE_KP_B as i32 | (1 << 30),
    SDLK_KP_C = SDL_Scancode.SDL_SCANCODE_KP_C as i32 | (1 << 30),
    SDLK_KP_D = SDL_Scancode.SDL_SCANCODE_KP_D as i32 | (1 << 30),
    SDLK_KP_E = SDL_Scancode.SDL_SCANCODE_KP_E as i32 | (1 << 30),
    SDLK_KP_F = SDL_Scancode.SDL_SCANCODE_KP_F as i32 | (1 << 30),
    SDLK_KP_XOR = SDL_Scancode.SDL_SCANCODE_KP_XOR as i32 | (1 << 30),
    SDLK_KP_POWER = SDL_Scancode.SDL_SCANCODE_KP_POWER as i32 | (1 << 30),
    SDLK_KP_PERCENT = SDL_Scancode.SDL_SCANCODE_KP_PERCENT as i32 | (1 << 30),
    SDLK_KP_LESS = SDL_Scancode.SDL_SCANCODE_KP_LESS as i32 | (1 << 30),
    SDLK_KP_GREATER = SDL_Scancode.SDL_SCANCODE_KP_GREATER as i32 | (1 << 30),
    SDLK_KP_AMPERSAND = SDL_Scancode.SDL_SCANCODE_KP_AMPERSAND as i32 | (1 << 30),
    SDLK_KP_DBLAMPERSAND = SDL_Scancode.SDL_SCANCODE_KP_DBLAMPERSAND as i32 | (1 << 30),
    SDLK_KP_VERTICALBAR = SDL_Scancode.SDL_SCANCODE_KP_VERTICALBAR as i32 | (1 << 30),
    SDLK_KP_DBLVERTICALBAR = SDL_Scancode.SDL_SCANCODE_KP_DBLVERTICALBAR as i32 | (1 << 30),
    SDLK_KP_COLON = SDL_Scancode.SDL_SCANCODE_KP_COLON as i32 | (1 << 30),
    SDLK_KP_HASH = SDL_Scancode.SDL_SCANCODE_KP_HASH as i32 | (1 << 30),
    SDLK_KP_SPACE = SDL_Scancode.SDL_SCANCODE_KP_SPACE as i32 | (1 << 30),
    SDLK_KP_AT = SDL_Scancode.SDL_SCANCODE_KP_AT as i32 | (1 << 30),
    SDLK_KP_EXCLAM = SDL_Scancode.SDL_SCANCODE_KP_EXCLAM as i32 | (1 << 30),
    SDLK_KP_MEMSTORE = SDL_Scancode.SDL_SCANCODE_KP_MEMSTORE as i32 | (1 << 30),
    SDLK_KP_MEMRECALL = SDL_Scancode.SDL_SCANCODE_KP_MEMRECALL as i32 | (1 << 30),
    SDLK_KP_MEMCLEAR = SDL_Scancode.SDL_SCANCODE_KP_MEMCLEAR as i32 | (1 << 30),
    SDLK_KP_MEMADD = SDL_Scancode.SDL_SCANCODE_KP_MEMADD as i32 | (1 << 30),
    SDLK_KP_MEMSUBTRACT = SDL_Scancode.SDL_SCANCODE_KP_MEMSUBTRACT as i32 | (1 << 30),
    SDLK_KP_MEMMULTIPLY = SDL_Scancode.SDL_SCANCODE_KP_MEMMULTIPLY as i32 | (1 << 30),
    SDLK_KP_MEMDIVIDE = SDL_Scancode.SDL_SCANCODE_KP_MEMDIVIDE as i32 | (1 << 30),
    SDLK_KP_PLUSMINUS = SDL_Scancode.SDL_SCANCODE_KP_PLUSMINUS as i32 | (1 << 30),
    SDLK_KP_CLEAR = SDL_Scancode.SDL_SCANCODE_KP_CLEAR as i32 | (1 << 30),
    SDLK_KP_CLEARENTRY = SDL_Scancode.SDL_SCANCODE_KP_CLEARENTRY as i32 | (1 << 30),
    SDLK_KP_BINARY = SDL_Scancode.SDL_SCANCODE_KP_BINARY as i32 | (1 << 30),
    SDLK_KP_OCTAL = SDL_Scancode.SDL_SCANCODE_KP_OCTAL as i32 | (1 << 30),
    SDLK_KP_DECIMAL = SDL_Scancode.SDL_SCANCODE_KP_DECIMAL as i32 | (1 << 30),
    SDLK_KP_HEXADECIMAL = SDL_Scancode.SDL_SCANCODE_KP_HEXADECIMAL as i32 | (1 << 30),
    SDLK_LCTRL = SDL_Scancode.SDL_SCANCODE_LCTRL as i32 | (1 << 30),
    SDLK_LSHIFT = SDL_Scancode.SDL_SCANCODE_LSHIFT as i32 | (1 << 30),
    SDLK_LALT = SDL_Scancode.SDL_SCANCODE_LALT as i32 | (1 << 30),
    SDLK_LGUI = SDL_Scancode.SDL_SCANCODE_LGUI as i32 | (1 << 30),
    SDLK_RCTRL = SDL_Scancode.SDL_SCANCODE_RCTRL as i32 | (1 << 30),
    SDLK_RSHIFT = SDL_Scancode.SDL_SCANCODE_RSHIFT as i32 | (1 << 30),
    SDLK_RALT = SDL_Scancode.SDL_SCANCODE_RALT as i32 | (1 << 30),
    SDLK_RGUI = SDL_Scancode.SDL_SCANCODE_RGUI as i32 | (1 << 30),
    SDLK_MODE = SDL_Scancode.SDL_SCANCODE_MODE as i32 | (1 << 30),
    SDLK_AUDIONEXT = SDL_Scancode.SDL_SCANCODE_AUDIONEXT as i32 | (1 << 30),
    SDLK_AUDIOPREV = SDL_Scancode.SDL_SCANCODE_AUDIOPREV as i32 | (1 << 30),
    SDLK_AUDIOSTOP = SDL_Scancode.SDL_SCANCODE_AUDIOSTOP as i32 | (1 << 30),
    SDLK_AUDIOPLAY = SDL_Scancode.SDL_SCANCODE_AUDIOPLAY as i32 | (1 << 30),
    SDLK_AUDIOMUTE = SDL_Scancode.SDL_SCANCODE_AUDIOMUTE as i32 | (1 << 30),
    SDLK_MEDIASELECT = SDL_Scancode.SDL_SCANCODE_MEDIASELECT as i32 | (1 << 30),
    SDLK_WWW = SDL_Scancode.SDL_SCANCODE_WWW as i32 | (1 << 30),
    SDLK_MAIL = SDL_Scancode.SDL_SCANCODE_MAIL as i32 | (1 << 30),
    SDLK_CALCULATOR = SDL_Scancode.SDL_SCANCODE_CALCULATOR as i32 | (1 << 30),
    SDLK_COMPUTER = SDL_Scancode.SDL_SCANCODE_COMPUTER as i32 | (1 << 30),
    SDLK_AC_SEARCH = SDL_Scancode.SDL_SCANCODE_AC_SEARCH as i32 | (1 << 30),
    SDLK_AC_HOME = SDL_Scancode.SDL_SCANCODE_AC_HOME as i32 | (1 << 30),
    SDLK_AC_BACK = SDL_Scancode.SDL_SCANCODE_AC_BACK as i32 | (1 << 30),
    SDLK_AC_FORWARD = SDL_Scancode.SDL_SCANCODE_AC_FORWARD as i32 | (1 << 30),
    SDLK_AC_STOP = SDL_Scancode.SDL_SCANCODE_AC_STOP as i32 | (1 << 30),
    SDLK_AC_REFRESH = SDL_Scancode.SDL_SCANCODE_AC_REFRESH as i32 | (1 << 30),
    SDLK_AC_BOOKMARKS = SDL_Scancode.SDL_SCANCODE_AC_BOOKMARKS as i32 | (1 << 30),
    SDLK_BRIGHTNESSDOWN = SDL_Scancode.SDL_SCANCODE_BRIGHTNESSDOWN as i32 | (1 << 30),
    SDLK_BRIGHTNESSUP = SDL_Scancode.SDL_SCANCODE_BRIGHTNESSUP as i32 | (1 << 30),
    SDLK_DISPLAYSWITCH = SDL_Scancode.SDL_SCANCODE_DISPLAYSWITCH as i32 | (1 << 30),
    SDLK_KBDILLUMTOGGLE = SDL_Scancode.SDL_SCANCODE_KBDILLUMTOGGLE as i32 | (1 << 30),
    SDLK_KBDILLUMDOWN = SDL_Scancode.SDL_SCANCODE_KBDILLUMDOWN as i32 | (1 << 30),
    SDLK_KBDILLUMUP = SDL_Scancode.SDL_SCANCODE_KBDILLUMUP as i32 | (1 << 30),
    SDLK_EJECT = SDL_Scancode.SDL_SCANCODE_EJECT as i32 | (1 << 30),
    SDLK_SLEEP = SDL_Scancode.SDL_SCANCODE_SLEEP as i32 | (1 << 30),
    SDLK_APP1 = SDL_Scancode.SDL_SCANCODE_APP1 as i32 | (1 << 30),
    SDLK_APP2 = SDL_Scancode.SDL_SCANCODE_APP2 as i32 | (1 << 30),
    SDLK_AUDIOREWIND = SDL_Scancode.SDL_SCANCODE_AUDIOREWIND as i32 | (1 << 30),
    SDLK_AUDIOFASTFORWARD = SDL_Scancode.SDL_SCANCODE_AUDIOFASTFORWARD as i32 | (1 << 30),
    SDLK_SOFTLEFT = SDL_Scancode.SDL_SCANCODE_SOFTLEFT as i32 | (1 << 30),
    SDLK_SOFTRIGHT = SDL_Scancode.SDL_SCANCODE_SOFTRIGHT as i32 | (1 << 30),
    SDLK_CALL = SDL_Scancode.SDL_SCANCODE_CALL as i32 | (1 << 30),
    SDLK_ENDCALL = SDL_Scancode.SDL_SCANCODE_ENDCALL as i32 | (1 << 30)
}

KMOD_NONE :: 0x0000;
KMOD_LSHIFT :: 0x0001;
KMOD_RSHIFT :: 0x0002;
KMOD_LCTRL :: 0x0040;
KMOD_RCTRL :: 0x0080;
KMOD_LALT :: 0x0100;
KMOD_RALT :: 0x0200;
KMOD_LGUI :: 0x0400;
KMOD_RGUI :: 0x0800;
KMOD_NUM :: 0x1000;
KMOD_CAPS :: 0x2000;
KMOD_MODE :: 0x4000;
KMOD_SCROLL :: 0x8000;
KMOD_CTRL :: KMOD_LCTRL | KMOD_RCTRL;
KMOD_SHIFT :: KMOD_LSHIFT | KMOD_RSHIFT;
KMOD_ALT :: KMOD_LALT | KMOD_RALT;
KMOD_GUI :: KMOD_LGUI | KMOD_RGUI;
KMOD_RESERVED :: KMOD_SCROLL;

SDL_JOYSTICK_POWER_UNKNOWN :: -1;
SDL_JOYSTICK_POWER_EMPTY :: 0;
SDL_JOYSTICK_POWER_LOW :: 1;
SDL_JOYSTICK_POWER_MEDIUM :: 2;
SDL_JOYSTICK_POWER_FULL :: 3;
SDL_JOYSTICK_POWER_WIRED :: 4;
SDL_JOYSTICK_POWER_MAX :: 5;

SDL_WINDOW_FULLSCREEN :: 0x00000001;
SDL_WINDOW_OPENGL :: 0x00000002;
SDL_WINDOW_SHOWN :: 0x00000004;
SDL_WINDOW_HIDDEN :: 0x00000008;
SDL_WINDOW_BORDERLESS :: 0x00000010;
SDL_WINDOW_RESIZABLE :: 0x00000020;
SDL_WINDOW_MINIMIZED :: 0x00000040;
SDL_WINDOW_MAXIMIZED :: 0x00000080;
SDL_WINDOW_MOUSE_GRABBED :: 0x00000100;
SDL_WINDOW_INPUT_FOCUS :: 0x00000200;
SDL_WINDOW_MOUSE_FOCUS :: 0x00000400;
SDL_WINDOW_FULLSCREEN_DESKTOP :: (SDL_WINDOW_FULLSCREEN | 0x00001000);
SDL_WINDOW_FOREIGN :: 0x00000800;
SDL_WINDOW_ALLOW_HIGHDPI :: 0x00002000;
SDL_WINDOW_MOUSE_CAPTURE :: 0x00004000;
SDL_WINDOW_ALWAYS_ON_TOP :: 0x00008000;
SDL_WINDOW_SKIP_TASKBAR :: 0x00010000;
SDL_WINDOW_UTILITY :: 0x00020000;
SDL_WINDOW_TOOLTIP :: 0x00040000;
SDL_WINDOW_POPUP_MENU :: 0x00080000;
SDL_WINDOW_KEYBOARD_GRABBED :: 0x00100000;
SDL_WINDOW_VULKAN :: 0x10000000;
SDL_WINDOW_METAL :: 0x20000000;
SDL_WINDOW_INPUT_GRABBED :: SDL_WINDOW_MOUSE_GRABBED;

SDL_Rect :: struct {
    x: i32,
    y: i32,
    w: i32,
    h: i32
}

SDL_Renderer :: void;

SDL_RENDERER_SOFTWARE :: 0x00000001;
SDL_RENDERER_ACCELERATED :: 0x00000002;
SDL_RENDERER_PRESENTVSYNC :: 0x00000004;
SDL_RENDERER_TARGETTEXTURE :: 0x00000008;

SDL_Init :: (flags: u32) -> i32 #extern(LIBS);

SDL_CreateWindow :: (title: *u8, x: i32, y: i32, w: i32, h: i32, flags: u32) -> *SDL_Window #extern(LIBS);

SDL_PollEvent :: (event: *SDL_Event) -> i32 #extern(LIBS);

SDL_CreateRenderer :: (window: *SDL_Window, index: i32, flags: u32) -> *SDL_Renderer #extern(LIBS);

SDL_RenderPresent :: (renderer: *SDL_Renderer) #extern(LIBS);
SDL_SetRenderDrawColor :: (renderer: *SDL_Renderer, r: u8, g: u8, b: u8, a: u8) -> i32 #extern(LIBS);
SDL_RenderClear :: (renderer: *SDL_Renderer) -> i32 #extern(LIBS);
SDL_RenderFillRect :: (renderer: *SDL_Renderer, rect: *SDL_Rect) -> i32 #extern(LIBS);